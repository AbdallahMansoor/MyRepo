
SELECTORS

- partial/regex-like matching for attribute values (e.g. [attr^=val] selects any element with the 'attr' attribute whose value begins with 'val') (https://www.w3.org/TR/selectors-4/#attribute-selectors).


POSITION PROPERTY

- absolute position property: The element is removed from the normal document flow, and NO SPACE IS CREATED FOR THE ELEMENT IN THE PAGE LAYOUT. It is positioned relative to its closest positioned ancestor(https://developer.mozilla.org/en-US/docs/Web/CSS/position#description) (a positioned element is an element whose computed position value is either relative, absolute, fixed, or sticky. (In other words, it's anything except static.), if any; otherwise, it is placed relative to the INITIAL containing block(https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block).

VIEWPORT

- the viewport is affected by the browser's url bar and navigation buttons on mobile https://web.dev/state-of-css-2022/#viewport-units


FLEXBOX

- learn flexbox:
  https://www.w3.org/TR/css-flexbox-1/
  https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox

GRID

- learn grid:
  https://www.w3.org/TR/css-grid-2/ 
  https://css-tricks.com/snippets/css/complete-guide-grid/


IMAGES

- if you modify the width or height property of an image and set the other property to 'auto', it will adjust proportionally to maintain the image aspect ratio.


ANIMATION AND TRANSITION

- Animating CSS Box Model properties is discouraged. Animating/animation any box model property is inherently CPU intensive; consider animating the transform property instead.(https://developer.mozilla.org/en-US/docs/Web/CSS/animation)

- Animations/@keyframes in CSS have high specificity/cascade-origin when being applied, and the properties defined in the keyframe only apply to the element while the animation is running(until the animation-duration elapses), then the element fallback to its normal state(that is the normal CSS applied to the element).

- you can use 'ANIMATION-FILL-MODE' property to dictate how the state of the element will be going forward(after the animation end) and more(https://www.joshwcomeau.com/animation/keyframe-animations/)


View Transition API

-https://github.com/WICG/view-transitions/blob/main/explainer.md
-https://www.w3.org/TR/css-view-transitions-1/

- the document.startViewTransition() will map the element with a certain 'view-transition-name' from the old state (i.e before calling document.startViewTransition()) to the element with the same 'view-transition-name' in the new state, where '::view-transition-old(name)' would hold the visual representation(as a screenshot) of the old element, and ::view-transition-new(name) holds the visual representation of the new element, and ::view-transition-group(name) would animate the position and size from the old element to the new one.

- if two elements have the same 'view-transition-name' in the old / new state, the transition will be skipped and the promise returned from document.startViewTransition().ready would reject. 



MISC

- How the browser calculates ' auto ' width / height for an element : (https://www.w3.org/TR/CSS21/visudet.html) 

- margins blend / overlap except when the parent element is set to display: grid or display: flex.

- to remove the highlighting when a link/anchor element is clicked to give it native-like look: '-webkit-tap-highlight-color: transparent;'

- CSS modal/dialog view https://web.dev/animating-modal-views/ (note: pointer-events)

- you can use 'scroll-margin-top' with ':target' pseudo class (usually setting it to arbitrarily high value).

- in javascript, you can control the sequence of how style changes gets applied to an element visually using requestAnimationFrame(it's works like window.requestIdleCallback()), (meaning: apply this change, then paint first, then apply this change), here is a use case https://youtu.be/P2glQ0fz7DM?list=PLNYkxOF6rcIBmqosTU2eg82bqSrT3WMt1&t=2840

- :has(:target)



